### Summary of Features and Requirements for Full Points:

### **Architecture Requirements (5 points)**

- **Client-server architecture**: Properly implement client-server communication using RESTful APIs.
- **Client (JavaFX)**: Create a functional user interface for all interactions, including login, registration, viewing books, and managing book data.
- **Server (Spring Boot)**: Implement server-side business logic, handle requests, and interact with the database.
- **Communication**: Ensure efficient RESTful communication between client and server.

### **Database Design and Implementation (4 points)**

- Implement the following tables with proper relationships:
    - **Users Table**: Includes columns for user_id, username, password, role_id, and email.
    - **Roles Table**: Includes role_id and role_name to define user roles (e.g., User, Library Administrator).
    - **Books Table**: Includes book_id, title, author, isbn, and available_copies.
    - **Transactions Table**: Includes transaction_id, user_id, book_id, action, and date.
- Establish relationships between:
    - Users and Roles via role_id.
    - Transactions with Users and Books.

### **Login and Registration (4 points)**

- **Registration**: Allow new users to register with details such as username, password, email, and role.
- **Login**: Enable users to log in with proper authentication .
- **Authorization**: Implement role-based access control for user and administrator functionalities.

### **User Interface (2 points)**

- Design a user-friendly interface in JavaFX:
    - Include forms for login and registration.
    - Provide clear navigation for borrowing, lending, and managing books.
    - Ensure an intuitive design for administrators to manage user accounts and books.

### **Role Implementation and Functionalities (6 points)**

1. **User Role (3 points)**:
    - **Viewing Books**: Browse and search the catalog.
    - **Borrowing Books**: Select and borrow books, reducing available copies.
    - **Lending Books**: Return borrowed books to increase available copies.
2. **Library Administrator Role (3 points)**:
    - **Managing Books**: Add, update, and remove books.
    - **Managing Users**: Create, edit, and delete user accounts.
    - **Overseeing Transactions**: Monitor borrowing and lending activities.

### **Overall Functionality and GitHub Project Management (5 points)**

- **Functionality**:
    - Ensure all CRUD operations are implemented for books and users.
    - Maintain robust error handling (e.g., preventing unauthorized actions, avoiding SQL injection).
- **GitHub Usage**:
    - Regular commits reflecting progress.
    - Use branches, pull requests, and issue tracking for collaboration.
    - Document project details in the repository (e.g., README with setup instructions, features, and architecture overview).

### **Key Deliverables:**

- Fully functional client-server application with JavaFX UI and Spring Boot backend.
- Database implementation covering all specified tables and relationships.
- Features for user login, registration, and role-specific functionalities.
- Proper use of GitHub for version control and project management.